' ============================================================================
' ElyseMain_Orchestrator - System Coordination Module
' Elyse Energy VBA Ecosystem - Main Orchestrator
' Coordinates all system modules and provides unified API
' ============================================================================

Option Explicit

' ============================================================================
' MODULE DEPENDENCIES
' ============================================================================
' This module coordinates all other modules:
' - ElyseCore_System (base configuration)
' - ElyseLogger_Module (logging system)
' - ElyseMessageBox_System (enhanced message boxes)
' - ElyseTicket_System (support tickets)
' - ElyseSharePoint_Integration (SharePoint metadata)
' - ElyseErrorHandler_Module (error management)

' ============================================================================
' ORCHESTRATOR STATE AND CONFIGURATION
' ============================================================================

Private mSystemInitialized As Boolean
Private mModulesLoaded As Object
Private mSystemMode As SystemMode
Private mStartupTime As Date
Private mShutdownInProgress As Boolean

' Module status tracking
Private mCoreSystemStatus As Boolean
Private mLoggerStatus As Boolean
Private mMessageBoxStatus As Boolean
Private mTicketSystemStatus As Boolean
Private mSharePointStatus As Boolean
Private mErrorHandlerStatus As Boolean

' System configuration
Private mAutoStartModules As Boolean
Private mEnableHeartbeat As Boolean
Private mSystemHealthChecks As Boolean

' ============================================================================
' SYSTEM INITIALIZATION AND STARTUP
' ============================================================================

Public Function InitializeElyseSystem(Optional systemMode As SystemMode = PRODUCTION_MODE, Optional autoStart As Boolean = True) As Boolean
    ' Main system initialization - call this first
    
    On Error GoTo ErrorHandler
    
    If mSystemInitialized Then
        InitializeElyseSystem = True
        Exit Function
    End If
    
    mStartupTime = Now
    mSystemMode = systemMode
    mAutoStartModules = autoStart
    mShutdownInProgress = False
    
    ' Initialize module status tracking
    Set mModulesLoaded = CreateObject("Scripting.Dictionary")
    ResetModuleStatus
    
    ' Phase 1: Initialize Core System
    If Not InitializeCoreModule() Then
        GoTo ErrorHandler
    End If
    
    ' Phase 2: Initialize Logger (depends on Core)
    If Not InitializeLoggerModule() Then
        GoTo ErrorHandler
    End If
    
    ' Log system startup
    LogInfo "system_startup", "Elyse Energy system starting up - Mode: " & GetSystemModeString(systemMode)
    
    ' Phase 3: Initialize remaining modules if auto-start enabled
    If mAutoStartModules Then
        InitializeAllModules
    End If
    
    ' Phase 4: Post-initialization setup
    If Not CompleteSystemInitialization() Then
        GoTo ErrorHandler
    End If
    
    mSystemInitialized = True
    
    LogInfo "system_ready", "Elyse Energy system ready - " & GetLoadedModulesCount() & " modules loaded"
    InitializeElyseSystem = True
    Exit Function
    
ErrorHandler:
    LogError "system_init_failed", Err.Number, "System initialization failed: " & Err.Description
    InitializeElyseSystem = False
End Function

Private Function InitializeCoreModule() As Boolean
    ' Initialize core system module
    On Error GoTo ErrorHandler
    
    mCoreSystemStatus = InitializeCoreSystem(mSystemMode)
    mModulesLoaded("core") = mCoreSystemStatus
    
    InitializeCoreModule = mCoreSystemStatus
    Exit Function
    
ErrorHandler:
    InitializeCoreModule = False
End Function

Private Function InitializeLoggerModule() As Boolean
    ' Initialize logger module
    On Error GoTo ErrorHandler
    
    If Not mCoreSystemStatus Then
        InitializeLoggerModule = False
        Exit Function
    End If
    
    Dim logLevel As LogLevel
    logLevel = IIf(mSystemMode = DEBUG_MODE, DEBUG_LEVEL, INFO_LEVEL)
    
    mLoggerStatus = InitializeLogger(logLevel)
    mModulesLoaded("logger") = mLoggerStatus
    
    InitializeLoggerModule = mLoggerStatus
    Exit Function
    
ErrorHandler:
    InitializeLoggerModule = False
End Function

Private Sub InitializeAllModules()
    ' Initialize all remaining modules
    
    LogInfo "modules_init_start", "Initializing all system modules"
    
    ' Initialize Error Handler (should be early for better error handling)
    InitializeErrorHandlerModule
    
    ' Initialize SharePoint Integration
    InitializeSharePointModule
    
    ' Initialize Message Box System
    InitializeMessageBoxModule
    
    ' Initialize Ticket System
    InitializeTicketModule
    
    LogInfo "modules_init_complete", "Module initialization complete"
End Sub

Private Sub InitializeErrorHandlerModule()
    ' Initialize error handler module
    On Error Resume Next
    
    mErrorHandlerStatus = InitializeErrorHandler()
    mModulesLoaded("error_handler") = mErrorHandlerStatus
    
    If mErrorHandlerStatus Then
        LogInfo "module_loaded", "Error Handler module loaded successfully"
    Else
        LogWarning "module_load_failed", "Error Handler module failed to load"
    End If
    
    On Error GoTo 0
End Sub

Private Sub InitializeSharePointModule()
    ' Initialize SharePoint integration module
    On Error Resume Next
    
    mSharePointStatus = InitializeSharePointIntegration()
    mModulesLoaded("sharepoint") = mSharePointStatus
    
    If mSharePointStatus Then
        LogInfo "module_loaded", "SharePoint Integration module loaded successfully"
    Else
        LogWarning "module_load_failed", "SharePoint Integration module failed to load or not applicable"
    End If
    
    On Error GoTo 0
End Sub

Private Sub InitializeMessageBoxModule()
    ' Initialize message box system module
    On Error Resume Next
    
    ' MessageBox system doesn't have explicit initialization but we track its availability
    mMessageBoxStatus = True ' Always available
    mModulesLoaded("messagebox") = mMessageBoxStatus
    
    LogInfo "module_loaded", "MessageBox System module loaded successfully"
    
    On Error GoTo 0
End Sub

Private Sub InitializeTicketModule()
    ' Initialize ticket system module
    On Error Resume Next
    
    ' Ticket system doesn't have explicit initialization but we track its availability
    mTicketSystemStatus = True ' Always available
    mModulesLoaded("ticket_system") = mTicketSystemStatus
    
    LogInfo "module_loaded", "Ticket System module loaded successfully"
    
    On Error GoTo 0
End Sub

Private Function CompleteSystemInitialization() As Boolean
    ' Complete system initialization with post-setup tasks
    On Error GoTo ErrorHandler
    
    ' Enable automatic error handling if error handler is loaded
    If mErrorHandlerStatus Then
        EnableAutoRecovery
    End If
    
    ' Start heartbeat system if logger is loaded
    If mLoggerStatus And mEnableHeartbeat Then
        EnableAutoFlush
    End If
    
    ' Perform initial system health check
    If mSystemHealthChecks Then
        PerformSystemHealthCheck
    End If
    
    ' Set up integrated error handling across modules
    SetupIntegratedErrorHandling
    
    CompleteSystemInitialization = True
    Exit Function
    
ErrorHandler:
    CompleteSystemInitialization = False
End Function

' ============================================================================
' SYSTEM SHUTDOWN AND CLEANUP
' ============================================================================

Public Sub ShutdownElyseSystem()
    ' Clean shutdown of entire system
    
    If Not mSystemInitialized Or mShutdownInProgress Then Exit Sub
    
    mShutdownInProgress = True
    
    LogInfo "system_shutdown_start", "Elyse Energy system shutdown initiated"
    
    ' Shutdown modules in reverse order
    ShutdownTicketModule
    ShutdownMessageBoxModule
    ShutdownSharePointModule
    ShutdownErrorHandlerModule
    ShutdownLoggerModule
    ShutdownCoreModule
    
    ' Final cleanup
    Set mModulesLoaded = Nothing
    mSystemInitialized = False
    
    ' Note: Cannot log after logger shutdown
End Sub

Private Sub ShutdownTicketModule()
    ' Shutdown ticket system module
    On Error Resume Next
    ' Ticket system cleanup (if needed)
    mModulesLoaded("ticket_system") = False
    On Error GoTo 0
End Sub

Private Sub ShutdownMessageBoxModule()
    ' Shutdown message box system module
    On Error Resume Next
    ' MessageBox system cleanup (if needed)
    mModulesLoaded("messagebox") = False
    On Error GoTo 0
End Sub

Private Sub ShutdownSharePointModule()
    ' Shutdown SharePoint integration module
    On Error Resume Next
    If mSharePointStatus Then
        CleanupSharePointIntegration
    End If
    mModulesLoaded("sharepoint") = False
    On Error GoTo 0
End Sub

Private Sub ShutdownErrorHandlerModule()
    ' Shutdown error handler module
    On Error Resume Next
    If mErrorHandlerStatus Then
        ShutdownErrorHandler
    End If
    mModulesLoaded("error_handler") = False
    On Error GoTo 0
End Sub

Private Sub ShutdownLoggerModule()
    ' Shutdown logger module
    On Error Resume Next
    If mLoggerStatus Then
        LogInfo "system_shutdown_complete", "Elyse Energy system shutdown complete"
        ShutdownLogger
    End If
    mModulesLoaded("logger") = False
    On Error GoTo 0
End Sub

Private Sub ShutdownCoreModule()
    ' Shutdown core system module
    On Error Resume Next
    ShutdownCoreSystem
    mModulesLoaded("core") = False
    On Error GoTo 0
End Sub

' ============================================================================
' UNIFIED PUBLIC API
' ============================================================================

' Logging API
Public Sub LogInfo(action As String, details As String)
    If mLoggerStatus Then
        LogEvent action, details, INFO_LEVEL
    End If
End Sub

Public Sub LogDebug(action As String, details As String)
    If mLoggerStatus Then
        LogEvent action, details, DEBUG_LEVEL
    End If
End Sub

Public Sub LogWarning(action As String, details As String)
    If mLoggerStatus Then
        LogEvent action, details, WARNING_LEVEL
    End If
End Sub

Public Sub LogError(action As String, errorNumber As Long, details As String)
    If mLoggerStatus Then
        LogEvent action, "Error " & errorNumber & ": " & details, ERROR_LEVEL
    End If
End Sub

Public Sub LogRibbon(buttonId As String)
    If mLoggerStatus Then
        LogRibbonAction buttonId
    End If
End Sub

' Enhanced MessageBox API
Public Function ShowInfoMessage(title As String, message As String) As String
    If mMessageBoxStatus Then
        ShowInfoMessage = ShowEnhancedMessageBox(title, message, INFO_MESSAGE)
    Else
        ShowInfoMessage = CStr(MsgBox(message, vbInformation, title))
    End If
End Function

Public Function ShowErrorMessage(title As String, message As String, Optional allowTicket As Boolean = True) As String
    If mMessageBoxStatus And mTicketSystemStatus And allowTicket Then
        ShowErrorMessage = ShowEnhancedMessageBox(title, message, ERROR_MESSAGE, "OK", True)
    ElseIf mMessageBoxStatus Then
        ShowErrorMessage = ShowEnhancedMessageBox(title, message, ERROR_MESSAGE)
    Else
        ShowErrorMessage = CStr(MsgBox(message, vbCritical, title))
    End If
End Function

Public Function ShowConfirmation(title As String, message As String) As Boolean
    If mMessageBoxStatus Then
        Dim result As String
        result = ShowEnhancedMessageBox(title, message, CONFIRMATION_MESSAGE, "Yes,No")
        ShowConfirmation = (result = "Yes")
    Else
        ShowConfirmation = (MsgBox(message, vbYesNo + vbQuestion, title) = vbYes)
    End If
End Function

Public Function SelectFromList(title As String, message As String, items As Collection) As Long
    If mMessageBoxStatus Then
        SelectFromList = ShowListSelectionBox(title, message, items)
    Else
        SelectFromList = 0 ' Fallback not available
    End If
End Function

Public Function SelectRange(title As String, message As String, Optional defaultRange As String = "") As Range
    If mMessageBoxStatus Then
        Set SelectRange = ShowRangeSelectorBox(title, message, defaultRange)
    Else
        Set SelectRange = Nothing
    End If
End Function

Public Function ShowMarkdownInfo(title As String, content As String) As Long
    If mMessageBoxStatus Then
        ShowMarkdownInfo = ShowMarkdownInfoBox(title, content)
    Else
        MsgBox content, vbInformation, title
        ShowMarkdownInfo = 1
    End If
End Function

' Ticket System API
Public Function CreateSupportTicket() As String
    If mTicketSystemStatus Then
        CreateSupportTicket = CreateManualTicket()
    Else
        CreateSupportTicket = "SYSTEM_NOT_AVAILABLE"
    End If
End Function

Public Function CreateErrorTicket(errorMsg As String, Optional errorCode As Long = 0) As String
    If mTicketSystemStatus Then
        CreateErrorTicket = CreateQuickErrorTicket(errorMsg, errorCode)
    Else
        CreateErrorTicket = "SYSTEM_NOT_AVAILABLE"
    End If
End Function

' SharePoint API
Public Function GetDocumentID() As String
    If mSharePointStatus Then
        GetDocumentID = GetSharePointDocumentID()
    Else
        GetDocumentID = "NOT_AVAILABLE"
    End If
End Function

Public Function GetDocumentLocation() As String
    If mSharePointStatus Then
        GetDocumentLocation = GetDisplayablePath()
    Else
        GetDocumentLocation = ThisWorkbook.FullName
    End If
End Function

Public Function IsOnSharePoint() As Boolean
    If mSharePointStatus Then
        IsOnSharePoint = IsSharePointDocument()
    Else
        IsOnSharePoint = False
    End If
End Function

' Error Handling API
Public Sub HandleVBAError(procedureName As String, Optional moduleName As String = "")
    If mErrorHandlerStatus Then
        HandleError procedureName, moduleName
    Else
        ' Fallback error handling
        LogError "vba_error", Err.Number, "Procedure: " & procedureName & " | Module: " & moduleName & " | Error: " & Err.Description
    End If
End Sub

Public Sub HandleCustomError(errorMessage As String, procedureName As String)
    If mErrorHandlerStatus Then
        HandleCustomError errorMessage, procedureName
    Else
        LogError "custom_error", 9999, "Procedure: " & procedureName & " | Error: " & errorMessage
    End If
End Sub

' ============================================================================
' INTEGRATED WORKFLOWS
' ============================================================================

Public Function HandleErrorWithTicketOption(title As String, errorMessage As String, procedureName As String) As String
    ' Integrated workflow: Error handling with automatic ticket option
    
    ' Log the error
    LogError "integrated_error", 0, "Procedure: " & procedureName & " | Message: " & errorMessage
    
    ' Show error message with ticket option
    Dim result As String
    result = ShowErrorMessage(title, errorMessage, True)
    
    ' Handle ticket creation if requested
    If result = "CREATE_TICKET" Then
        Dim ticketResult As String
        ticketResult = CreateErrorTicket(errorMessage, 0)
        
        If ticketResult <> "SYSTEM_NOT_AVAILABLE" And ticketResult <> "CANCELLED" Then
            ShowInfoMessage "Ticket Created", "Support ticket " & ticketResult & " has been created and sent to the support team."
        End If
    End If
    
    HandleErrorWithTicketOption = result
End Function

Public Function ProcessDataWithErrorHandling(dataDescription As String, operationName As String, operationProc As String) As Boolean
    ' Integrated workflow: Data processing with comprehensive error handling
    
    LogInfo "data_operation_start", "Operation: " & operationName & " | Data: " & dataDescription
    
    On Error GoTo ErrorHandler
    
    ' The calling code would execute the operation here
    ' This is a framework for protected operations
    
    LogInfo "data_operation_success", "Operation completed successfully: " & operationName
    ProcessDataWithErrorHandling = True
    Exit Function
    
ErrorHandler:
    LogError "data_operation_error", Err.Number, "Operation: " & operationName & " | Error: " & Err.Description
    
    ' Use integrated error handling
    Dim errorResult As String
    errorResult = HandleErrorWithTicketOption("Data Processing Error", "Error in " & operationName & ": " & Err.Description, operationProc)
    
    ProcessDataWithErrorHandling = False
End Function

' ============================================================================
' SYSTEM HEALTH AND DIAGNOSTICS
' ============================================================================

Public Function PerformSystemHealthCheck() As Object
    ' Perform comprehensive system health check
    
    LogInfo "health_check_start", "Performing system health check"
    
    Dim healthReport As Object
    Set healthReport = CreateObject("Scripting.Dictionary")
    
    ' Core system health
    healthReport("core_system") = GetCoreSystemHealth()
    
    ' Module health
    healthReport("logger") = GetLoggerHealth()
    healthReport("error_handler") = GetErrorHandlerHealth()
    healthReport("sharepoint") = GetSharePointHealth()
    healthReport("messagebox") = GetMessageBoxHealth()
    healthReport("ticket_system") = GetTicketSystemHealth()
    
    ' Overall system metrics
    healthReport("uptime_minutes") = DateDiff("n", mStartupTime, Now)
    healthReport("modules_loaded") = GetLoadedModulesCount()
    healthReport("system_mode") = GetSystemModeString(mSystemMode)
    healthReport("memory_status") = "OK" ' Placeholder
    
    ' Calculate overall health score
    healthReport("overall_health") = CalculateOverallHealth(healthReport)
    
    LogInfo "health_check_complete", "Health check completed - Score: " & healthReport("overall_health")
    
    Set PerformSystemHealthCheck = healthReport
End Function

Private Function GetCoreSystemHealth() As Object
    Dim health As Object
    Set health =