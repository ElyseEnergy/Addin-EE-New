' ============================================================================
' ElyseMessageBox_System - Enhanced MessageBox Components
' Elyse Energy VBA Ecosystem - MessageBox Component
' Requires: ElyseCore_System, ElyseLogger_Module
' ============================================================================

Option Explicit

' ============================================================================
' MODULE DEPENDENCIES
' ============================================================================
' This module requires:
' - ElyseCore_System (enums, constants, utilities)
' - ElyseLogger_Module (logging functions)

' ============================================================================
' MESSAGEBOX CONFIGURATION CLASSES
' ============================================================================

' Configuration class for MessageBox buttons
Public Type MessageBoxButton
    Text As String
    ActionCallback As String
    IsDefault As Boolean
    ButtonType As String ' "primary", "secondary", "danger"
End Type

' Configuration class for MessageBox setup
Public Type MessageBoxConfig
    Title As String
    Message As String
    MessageType As MessageType
    Buttons(1 To 3) As MessageBoxButton
    ButtonCount As Integer
    ShowIcon As Boolean
    AllowResize As Boolean
    Width As Long
    Height As Long
End Type

' ============================================================================
' GLOBAL MESSAGEBOX STATE
' ============================================================================

Private mMessageBoxOpen As Boolean
Private mCurrentResult As Long
Private mLastMessageConfig As MessageBoxConfig

' ============================================================================
' TYPE 1: LIST SELECTION MESSAGEBOX
' ============================================================================

Public Function ShowListSelectionBox(title As String, message As String, listItems As Collection, Optional defaultSelection As Integer = 1) As Long
    ' Show numbered list selection dialog
    
    LogInfo "messagebox_list_show", "Title: " & title & " | Items: " & listItems.Count
    
    ' Validate inputs
    If listItems.Count = 0 Then
        ShowListSelectionBox = 0
        Exit Function
    End If
    
    ' Create and configure form
    Dim listForm As Object
    Set listForm = CreateListSelectionForm(title, message, listItems, defaultSelection)
    
    ' Show modal and get result
    ShowListSelectionBox = DisplayModalForm(listForm)
    
    LogInfo "messagebox_list_result", "Selected item: " & ShowListSelectionBox
End Function

Private Function CreateListSelectionForm(title As String, message As String, items As Collection, defaultSel As Integer) As Object
    ' Create the list selection form dynamically
    
    ' This would create a UserForm programmatically
    ' For actual implementation, you'd need to create UserForm: ListSelectionForm
    
    Dim formConfig As Object
    Set formConfig = CreateObject("Scripting.Dictionary")
    
    formConfig("type") = "list_selection"
    formConfig("title") = title
    formConfig("message") = message
    formConfig("items") = items
    formConfig("default_selection") = defaultSel
    formConfig("width") = 400
    formConfig("height") = 450
    
    Set CreateListSelectionForm = formConfig
End Function

' ============================================================================
' TYPE 2: RANGE SELECTOR MESSAGEBOX
' ============================================================================

Public Function ShowRangeSelectorBox(title As String, message As String, Optional defaultRange As String = "") As Range
    ' Show Excel range selector dialog
    
    LogInfo "messagebox_range_show", "Title: " & title & " | Default: " & defaultRange
    
    ' Create and configure form
    Dim rangeForm As Object
    Set rangeForm = CreateRangeSelectorForm(title, message, defaultRange)
    
    ' Show modal and get result
    Dim selectedRange As Range
    Set selectedRange = DisplayRangeSelectorForm(rangeForm)
    
    If Not selectedRange Is Nothing Then
        LogInfo "messagebox_range_result", "Selected range: " & selectedRange.Address
    Else
        LogInfo "messagebox_range_result", "No range selected"
    End If
    
    Set ShowRangeSelectorBox = selectedRange
End Function

Private Function CreateRangeSelectorForm(title As String, message As String, defaultRange As String) As Object
    ' Create the range selector form configuration
    
    Dim formConfig As Object
    Set formConfig = CreateObject("Scripting.Dictionary")
    
    formConfig("type") = "range_selector"
    formConfig("title") = title
    formConfig("message") = message
    formConfig("default_range") = defaultRange
    formConfig("width") = 450
    formConfig("height") = 300
    
    Set CreateRangeSelectorForm = formConfig
End Function

Private Function DisplayRangeSelectorForm(formConfig As Object) As Range
    ' Display the range selector form and return selected range
    
    ' For actual implementation, this would show RangeSelectorForm UserForm
    ' Placeholder implementation using InputBox
    
    On Error Resume Next
    Dim selectedRange As Range
    Set selectedRange = Application.InputBox( _
        prompt:=formConfig("message"), _
        title:=formConfig("title"), _
        Default:=formConfig("default_range"), _
        Type:=8)
    
    Set DisplayRangeSelectorForm = selectedRange
    On Error GoTo 0
End Function

' ============================================================================
' TYPE 3: MARKDOWN INFORMATION MESSAGEBOX
' ============================================================================

Public Function ShowMarkdownInfoBox(title As String, markdownContent As String, Optional width As Long = 600, Optional height As Long = 500) As Long
    ' Show scrollable markdown information dialog
    
    LogInfo "messagebox_markdown_show", "Title: " & title & " | Content length: " & Len(markdownContent)
    
    ' Create and configure form
    Dim markdownForm As Object
    Set markdownForm = CreateMarkdownInfoForm(title, markdownContent, width, height)
    
    ' Show modal and get result
    ShowMarkdownInfoBox = DisplayModalForm(markdownForm)
    
    LogInfo "messagebox_markdown_result", "Dialog closed"
End Function

Private Function CreateMarkdownInfoForm(title As String, content As String, width As Long, height As Long) As Object
    ' Create the markdown info form configuration
    
    Dim formConfig As Object
    Set formConfig = CreateObject("Scripting.Dictionary")
    
    formConfig("type") = "markdown_info"
    formConfig("title") = title
    formConfig("content") = content
    formConfig("converted_content") = ConvertMarkdownToDisplayText(content)
    formConfig("width") = width
    formConfig("height") = height
    
    Set CreateMarkdownInfoForm = formConfig
End Function

Private Function ConvertMarkdownToDisplayText(markdown As String) As String
    ' Convert markdown to display-friendly text with basic formatting
    
    Dim result As String
    result = markdown
    
    ' Headers
    result = Replace(result, "### ", "▸ ")
    result = Replace(result, "## ", "▸▸ ")
    result = Replace(result, "# ", "▸▸▸ ")
    
    ' Lists
    result = Replace(result, "- ", "  • ")
    result = Replace(result, "* ", "  • ")
    
    ' Bold (simulation with uppercase)
    result = RegexReplace(result, "\*\*(.*?)\*\*", "$1")
    
    ' Italic (simulation with underscores)
    result = RegexReplace(result, "\*(.*?)\*", "_$1_")
    
    ' Tables
    result = ConvertMarkdownTables(result)
    
    ConvertMarkdownToDisplayText = result
End Function

Private Function RegexReplace(text As String, pattern As String, replacement As String) As String
    ' Simple regex replacement (basic implementation)
    ' For full regex support, would need Microsoft VBScript Regular Expressions library
    
    ' Basic implementation for bold text
    If pattern = "\*\*(.*?)\*\*" Then
        Dim startPos As Long, endPos As Long
        startPos = InStr(text, "**")
        
        Do While startPos > 0
            endPos = InStr(startPos + 2, text, "**")
            If endPos > 0 Then
                Dim boldText As String
                boldText = Mid(text, startPos + 2, endPos - startPos - 2)
                text = Left(text, startPos - 1) & UCase(boldText) & Mid(text, endPos + 2)
                startPos = InStr(startPos + Len(boldText), text, "**")
            Else
                Exit Do
            End If
        Loop
    End If
    
    RegexReplace = text
End Function

Private Function ConvertMarkdownTables(text As String) As String
    ' Convert markdown tables to text representation
    
    Dim lines() As String
    lines = Split(text, vbCrLf)
    
    Dim result As String
    Dim i As Long
    
    For i = 0 To UBound(lines)
        Dim line As String
        line = lines(i)
        
        ' Check if line contains table syntax
        If InStr(line, "|") > 0 And InStr(line, "|") <> Len(line) Then
            ' Replace | with formatted spacing
            line = Replace(line, "|", " | ")
            line = "  " & line & "  "
        End If
        
        result = result & line & vbCrLf
    Next i
    
    ConvertMarkdownTables = result
End Function

' ============================================================================
' TYPE 4: STANDARD OK/CANCEL MESSAGEBOX
' ============================================================================

Public Function ShowOKCancelBox(title As String, message As String, Optional defaultButton As String = "OK") As Boolean
    ' Show standard OK/Cancel dialog with corporate styling
    
    LogInfo "messagebox_okcancel_show", "Title: " & title
    
    ' Create configuration
    Dim config As MessageBoxConfig
    config.Title = title
    config.Message = message
    config.MessageType = CONFIRMATION_MESSAGE
    config.ButtonCount = 2
    
    ' Configure buttons
    config.Buttons(1).Text = "OK"
    config.Buttons(1).ButtonType = "primary"
    config.Buttons(1).IsDefault = (defaultButton = "OK")
    
    config.Buttons(2).Text = "Cancel"
    config.Buttons(2).ButtonType = "secondary"
    config.Buttons(2).IsDefault = (defaultButton = "Cancel")
    
    ' Show dialog
    Dim result As Long
    result = ShowCustomMessageBox(config)
    
    Dim success As Boolean
    success = (result = 1) ' 1 = OK, 2 = Cancel
    
    LogInfo "messagebox_okcancel_result", "Result: " & IIf(success, "OK", "Cancel")
    
    ShowOKCancelBox = success
End Function

' ============================================================================
' ENHANCED MESSAGEBOX WITH TICKET INTEGRATION
' ============================================================================

Public Function ShowEnhancedMessageBox(title As String, message As String, msgType As MessageType, Optional buttons As String = "OK", Optional allowTicketCreation As Boolean = False) As String
    ' Show enhanced message box with optional ticket creation
    
    LogInfo "messagebox_enhanced_show", "Title: " & title & " | Type: " & GetMessageTypeString(msgType)
    
    ' Create configuration
    Dim config As MessageBoxConfig
    config.Title = title
    config.Message = message
    config.MessageType = msgType
    config.ShowIcon = True
    
    ' Parse button configuration
    ParseButtonConfiguration config, buttons, allowTicketCreation
    
    ' Show dialog
    Dim result As Long
    result = ShowCustomMessageBox(config)
    
    ' Handle special actions
    Dim resultString As String
    resultString = HandleMessageBoxResult(result, config, allowTicketCreation)
    
    LogInfo "messagebox_enhanced_result", "Result: " & resultString
    
    ShowEnhancedMessageBox = resultString
End Function

Private Sub ParseButtonConfiguration(ByRef config As MessageBoxConfig, buttonString As String, allowTicket As Boolean)
    ' Parse button configuration string
    
    Dim buttonArray() As String
    buttonArray = Split(buttonString, ",")
    
    config.ButtonCount = UBound(buttonArray) + 1
    If config.ButtonCount > 3 Then config.ButtonCount = 3
    
    Dim i As Integer
    For i = 0 To config.ButtonCount - 1
        config.Buttons(i + 1).Text = Trim(buttonArray(i))
        config.Buttons(i + 1).ButtonType = GetButtonTypeFromText(config.Buttons(i + 1).Text)
        config.Buttons(i + 1).IsDefault = (i = 0)
    Next i
    
    ' Add ticket button if allowed and appropriate
    If allowTicket And config.MessageType = ERROR_MESSAGE And config.ButtonCount < 3 Then
        config.ButtonCount = config.ButtonCount + 1
        config.Buttons(config.ButtonCount).Text = "Create Ticket"
        config.Buttons(config.ButtonCount).ButtonType = "secondary"
        config.Buttons(config.ButtonCount).IsDefault = False
    End If
End Sub

Private Function GetButtonTypeFromText(buttonText As String) As String
    ' Determine button type from text
    
    Select Case LCase(Trim(buttonText))
        Case "ok", "yes", "confirm", "save", "submit"
            GetButtonTypeFromText = "primary"
        Case "cancel", "no", "close", "exit"
            GetButtonTypeFromText = "secondary"
        Case "delete", "remove", "reset"
            GetButtonTypeFromText = "danger"
        Case Else
            GetButtonTypeFromText = "secondary"
    End Select
End Function

Private Function HandleMessageBoxResult(result As Long, config As MessageBoxConfig, allowTicket As Boolean) As String
    ' Handle message box result and special actions
    
    If result <= 0 Or result > config.ButtonCount Then
        HandleMessageBoxResult = "CANCELLED"
        Exit Function
    End If
    
    Dim selectedButton As String
    selectedButton = config.Buttons(result).Text
    
    ' Check for special button actions
    If LCase(selectedButton) = "create ticket" And allowTicket Then
        ' Trigger ticket creation (will be handled by ticket module)
        HandleMessageBoxResult = "CREATE_TICKET"
    Else
        HandleMessageBoxResult = selectedButton
    End If
End Function

' ============================================================================
' CORE MESSAGEBOX DISPLAY ENGINE
' ============================================================================

Private Function ShowCustomMessageBox(config As MessageBoxConfig) As Long
    ' Core function to display custom message box
    
    ' For actual implementation, this would create and show a UserForm
    ' This is a placeholder that demonstrates the interface
    
    mMessageBoxOpen = True
    mLastMessageConfig = config
    
    ' Create the form based on configuration
    Dim formResult As Long
    formResult = CreateAndShowMessageBoxForm(config)
    
    mMessageBoxOpen = False
    ShowCustomMessageBox = formResult
End Function

Private Function CreateAndShowMessageBoxForm(config As MessageBoxConfig) As Long
    ' Create and display the actual message box form
    
    ' This would instantiate the appropriate UserForm based on config.MessageType
    ' For now, using standard MsgBox as fallback
    
    Dim msgBoxStyle As VbMsgBoxStyle
    msgBoxStyle = ConvertMessageTypeToMsgBoxStyle(config.MessageType)
    
    ' Add buttons based on configuration
    If config.ButtonCount = 1 Then
        msgBoxStyle = msgBoxStyle + vbOKOnly
    ElseIf config.ButtonCount = 2 Then
        msgBoxStyle = msgBoxStyle + vbOKCancel
    Else
        msgBoxStyle = msgBoxStyle + vbYesNoCancel
    End If
    
    ' Show message box
    CreateAndShowMessageBoxForm = MsgBox(config.Message, msgBoxStyle, config.Title)
End Function

Private Function ConvertMessageTypeToMsgBoxStyle(msgType As MessageType) As VbMsgBoxStyle
    ' Convert our message type to VBA MsgBox style
    
    Select Case msgType
        Case INFO_MESSAGE: ConvertMessageTypeToMsgBoxStyle = vbInformation
        Case SUCCESS_MESSAGE: ConvertMessageTypeToMsgBoxStyle = vbInformation
        Case WARNING_MESSAGE: ConvertMessageTypeToMsgBoxStyle = vbExclamation
        Case ERROR_MESSAGE: ConvertMessageTypeToMsgBoxStyle = vbCritical
        Case CONFIRMATION_MESSAGE: ConvertMessageTypeToMsgBoxStyle = vbQuestion
        Case Else: ConvertMessageTypeToMsgBoxStyle = vbInformation
    End Select
End Function

Private Function DisplayModalForm(formConfig As Object) As Long
    ' Generic function to display modal forms
    
    ' This would route to the appropriate form display function
    ' based on formConfig("type")
    
    Select Case formConfig("type")
        Case "list_selection"
            DisplayModalForm = ShowListForm(formConfig)
        Case "range_selector"
            DisplayModalForm = 1 ' Placeholder
        Case "markdown_info"
            DisplayModalForm = ShowMarkdownForm(formConfig)
        Case Else
            DisplayModalForm = 0
    End Select
End Function

Private Function ShowListForm(config As Object) As Long
    ' Show list selection form (placeholder implementation)
    
    Dim items As Collection
    Set items = config("items")
    
    ' Build list string for InputBox (temporary implementation)
    Dim listString As String
    Dim i As Integer
    
    For i = 1 To items.Count
        listString = listString & i & ". " & items(i) & vbCrLf
    Next i
    
    Dim userInput As String
    userInput = InputBox(config("message") & vbCrLf & vbCrLf & listString & vbCrLf & "Enter number:", config("title"))
    
    If IsNumeric(userInput) Then
        Dim selection As Long
        selection = CLng(userInput)
        If selection >= 1 And selection <= items.Count Then
            ShowListForm = selection
        Else
            ShowListForm = 0
        End If
    Else
        ShowListForm = 0
    End If
End Function

Private Function ShowMarkdownForm(config As Object) As Long
    ' Show markdown info form (placeholder implementation)
    
    ' For full implementation, would show MarkdownInfoForm UserForm
    MsgBox config("converted_content"), vbInformation, config("title")
    ShowMarkdownForm = 1
End Function

' ============================================================================
' CORPORATE STYLING UTILITIES
' ============================================================================

Public Function GetCorporateColorScheme(msgType As MessageType) As Object
    ' Get corporate color scheme for message type
    
    Dim colors As Object
    Set colors = CreateObject("Scripting.Dictionary")
    
    Select Case msgType
        Case INFO_MESSAGE
            colors("primary") = GetColor("primary")
            colors("background") = GetColor("background")
            colors("text") = GetColor("text")
            
        Case SUCCESS_MESSAGE
            colors("primary") = GetColor("success")
            colors("background") = GetColor("background")
            colors("text") = GetColor("text")
            
        Case WARNING_MESSAGE
            colors("primary") = GetColor("warning")
            colors("background") = GetColor("background")
            colors("text") = GetColor("text")
            
        Case ERROR_MESSAGE
            colors("primary") = GetColor("error")
            colors("background") = GetColor("background")
            colors("text") = GetColor("text")
            
        Case CONFIRMATION_MESSAGE
            colors("primary") = GetColor("secondary")
            colors("background") = GetColor("background")
            colors("text") = GetColor("text")
    End Select
    
    Set GetCorporateColorScheme = colors
End Function

Public Sub ApplyCorporateStyling(formObject As Object, msgType As MessageType)
    ' Apply corporate styling to form object
    
    Dim colors As Object
    Set colors = GetCorporateColorScheme(msgType)
    
    ' This would apply styling to actual UserForm controls
    ' Implementation depends on the specific form structure
End Sub

' ============================================================================
' PUBLIC CONVENIENCE FUNCTIONS
' ============================================================================

Public Function ShowInfoMessage(title As String, message As String) As String
    ' Convenience function for info messages
    ShowInfoMessage = ShowEnhancedMessageBox(title, message, INFO_MESSAGE, "OK")
End Function

Public Function ShowSuccessMessage(title As String, message As String) As String
    ' Convenience function for success messages
    ShowSuccessMessage = ShowEnhancedMessageBox(title, message, SUCCESS_MESSAGE, "OK")
End Function

Public Function ShowWarningMessage(title As String, message As String) As String
    ' Convenience function for warning messages
    ShowWarningMessage = ShowEnhancedMessageBox(title, message, WARNING_MESSAGE, "OK")
End Function

Public Function ShowErrorMessage(title As String, message As String, Optional allowTicket As Boolean = True) As String
    ' Convenience function for error messages with ticket option
    ShowErrorMessage = ShowEnhancedMessageBox(title, message, ERROR_MESSAGE, "OK", allowTicket)
End Function

Public Function ShowConfirmationMessage(title As String, message As String) As Boolean
    ' Convenience function for confirmation messages
    Dim result As String
    result = ShowEnhancedMessageBox(title, message, CONFIRMATION_MESSAGE, "Yes,No")
    ShowConfirmationMessage = (result = "Yes")
End Function

' ============================================================================
' MESSAGEBOX TEMPLATES FOR ELYSE ENERGY
' ============================================================================

Public Function ShowProductionDataConfirmation(operation As String, dataDescription As String) As Boolean
    ' Template for production data confirmations
    
    Dim title As String
    Dim message As String
    
    title = "Production Data " & operation
    message = "Confirm " & LCase(operation) & " for:" & vbCrLf & vbCrLf & _
              dataDescription & vbCrLf & vbCrLf & _
              "This action will affect production tracking data."
    
    ShowProductionDataConfirmation = ShowConfirmationMessage(title, message)
End Function

Public Function ShowCalculationErrorWithSupport(calculationType As String, errorDetails As String) As String
    ' Template for calculation errors with support option
    
    Dim title As String
    Dim message As String
    
    title = "Calculation Error - " & calculationType
    message = "An error occurred during " & LCase(calculationType) & " calculation:" & vbCrLf & vbCrLf & _
              errorDetails & vbCrLf & vbCrLf & _
              "Please verify your input data or contact support for assistance."
    
    ShowCalculationErrorWithSupport = ShowErrorMessage(title, message, True)
End Function

Public Function ShowDataExportSuccess(exportType As String, recordCount As Long, destination As String) As String
    ' Template for successful data export
    
    Dim title As String
    Dim message As String
    
    title = "Export Complete"
    message = exportType & " export completed successfully:" & vbCrLf & vbCrLf & _
              "Records exported: " & Format(recordCount, "#,##0") & vbCrLf & _
              "Destination: " & destination & vbCrLf & vbCrLf & _
              "The data is now available for use."
    
    ShowDataExportSuccess = ShowSuccessMessage(title, message)
End Function

' ============================================================================
' MODULE STATUS AND DIAGNOSTICS
' ============================================================================

Public Function GetMessageBoxSystemStatus() As Object
    ' Get status of message box system
    
    Dim status As Object
    Set status = CreateObject("Scripting.Dictionary")
    
    status("module_loaded") = True
    status("message_box_open") = mMessageBoxOpen
    status("last_message_title") = mLastMessageConfig.Title
    status("supported_types") = "list_selection,range_selector,markdown_info,ok_cancel,enhanced"
    
    Set GetMessageBoxSystemStatus = status
End Function